---

- hosts: localhost
  remote_user: <%= lambda_function[:remote_user] %>
  gather_facts: True

  vars:
    resource_id: <%= lambda_function[:resource_id] %>
    lambda_function_name: <%= lambda_function[:lambda_function_name] %>
    aws_access_key: <%= lambda_function[:aws_access_key] %>
    aws_secret_key: <%= lambda_function[:aws_secret_key] %>
    region: <%= lambda_function[:aws_region] %>
    iam_policy_name: <%= lambda_function[:iam_policy_name] %>
    iam_role_name: <%= lambda_function[:iam_role_name] %>
    vpc_security_group_name: <%= lambda_function[:vpc_security_group_name] %>

  tasks:

    - name: Delete lambda IAM policy
      iam_policy:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        iam_type: role
        iam_name: "{{ iam_role_name }}"
        policy_name: "{{ iam_policy_name }}"
        state: absent
      register: lambda_iam_policy_result

    - name: Delete lambda IAM role
      iam_role:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        name: "{{ iam_role_name }}"
        state: absent
      register: lambda_iam_role_result

    - name: Delete lambda function
      lambda:
        name: "{{ lambda_function_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: absent
      register: lambda_result

    - cloudwatchlogs_log_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: absent
        log_group_name: "/aws/lambda/{{ lambda_function_name }}"

    - name: Gather group facts
      amazon.aws.ec2_group_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ vpc_security_group_name }}"
      register: group_facts

    - name: set security group id fact
      set_fact:
        security_group_ids: "{{group_facts['security_groups']}}"
      when: group_facts is defined

    - name: Delete associated VPC security groups
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: 'absent'
        group_id: "{{ item['group_id'] }}"
      with_items: "{{ security_group_ids }}"
      when: security_group_ids is defined
      retries: 10
      delay: 6
      register: result
      until: result is not failed
      ignore_errors: yes

