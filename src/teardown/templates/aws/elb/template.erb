---
- name: Provision an Application Load Balancer
  hosts: localhost
  remote_user: <%= elb[:remote_user] %>
  gather_facts: True

  vars:
    resource_id: <%= elb[:resource_id] %>
    resource_name: <%= elb[:resource_name] %>
    aws_access_key: <%= elb[:aws_access_key] %>
    aws_secret_key: <%= elb[:aws_secret_key] %>
    region: <%= elb[:aws_region] %>
    deployment_name: <%= elb[:deployment_name] %>

  tasks:
    - name: Get default VPC fact
      amazon.aws.ec2_vpc_net_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        filters:
          isDefault: "true"
      register: default_vpc

    - name: Set default VPC id fact
      set_fact:
        default_vpc_id: "{{ default_vpc.vpcs | map(attribute='id') | list | first }}"

    - name: Get load balancer facts
      community.aws.elb_application_lb_info:
        names: "{{ deployment_name }}-{{ resource_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
      register: elb_facts

    - name: Delete elb
      elb_application_lb:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        name: "{{ deployment_name }}-{{ resource_id }}"
        state: absent
        wait: yes
      when: elb_facts is defined
      register: elb_result

    - name: Gather group facts
      amazon.aws.ec2_group_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ resource_name }}"
      register: group_facts

    - name: set security group id fact
      set_fact:
        security_group_ids: "{{group_facts['security_groups']}}"
      when: group_facts is defined

    - name: Delete elb security group
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: absent
        group_id: "{{ item['group_id'] }}"
      with_items: "{{ security_group_ids }}"
      retries: 10
      delay: 6
      register: result
      until: result is not failed
      ignore_errors: yes

    - name: Delete elb target Groups
      elb_target_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        name: "{{ deployment_name }}-{{ resource_id }}"
        vpc_id: "{{ default_vpc_id }}"
        state: absent
      when: elb_facts is defined
      ignore_errors: yes
