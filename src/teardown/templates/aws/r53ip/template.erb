---
- name: Terminate a route53 A recordset
  hosts: localhost
  gather_facts: True

  vars:
    resource_id: <%= r53[:resource_id] %>
    aws_access_key: <%= r53[:aws_access_key] %>
    aws_secret_key: <%= r53[:aws_secret_key] %>
    region: <%= r53[:aws_region] %>
    deployment_name: <%= r53[:deployment_name] %>
    domain: <%= r53[:domain] %>
    dns: <%= r53[:dns] %>
    ips: <%= r53[:ips] %>
    port: <%= r53[:port] %>
    reference_resource_name: <%= r53[:reference_resource_name] %>
    artifact_path: <%= r53[:artifact_file_path] %>

  tasks:
    - name: lookup the record
      route53:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: get
        zone: "{{ domain }}"
        record: "{{ dns }}"
        type: A
      register: record

    - name: Delete route53 A with IPs
      route53:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: absent
        zone: "{{ domain }}"
        record: "{{ dns }}"
        type: A
        value: "{{ record.set.value }}"
      when: ips is defined and ips is not none and record is defined and record.set is defined and record.set.value is defined

    - name: Get load balancer fact
      community.aws.elb_application_lb_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{region}}"
        names:
          - "{{ reference_resource_name }}"
      register: alb_facts
      when: reference_resource_name is defined and reference_resource_name is not none

    - name: Set elb url fact
      set_fact:
        elb_dns: "{{ alb_facts.load_balancers[0].dns_name }}"
        elb_zone_id: "{{ alb_facts.load_balancers[0].canonical_hosted_zone_id }}"
      when: reference_resource_name is defined and reference_resource_name is not none and alb_facts is defined and (alb_facts.load_balancers | length > 0)

    - route53:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: absent
        zone: "{{ domain }}"
        record: "{{ dns }}"
        type: A
        value: "{{ elb_dns }}"
        alias: True
        alias_hosted_zone_id: "{{ elb_zone_id }}"
      when: elb_dns is defined and elb_zone_id is defined
