---
- name: Lookup an EC2 instance
  hosts: localhost
  remote_user: <%= ec2[:remote_user] %>
  gather_facts: True

  vars:
    access_key: <%= ec2[:aws_access_key] %>
    secret_key: <%= ec2[:aws_secret_key] %>
    secret_key_name: <%= ec2[:secret_key_name] %>
    secret_key_path: <%= ec2[:secret_key_path] %>
    ami_name:  <%= ec2[:ami_name] %>
    is_windows: <%= ec2[:is_windows] %>
    region: <%= ec2[:region] %>

    resource_id: <%= ec2[:resource_id] %>
    resource_name: <%= ec2[:resource_name] %>
    instance_size: <%= ec2[:instance_size] %>
    artifact_path: <%= ec2[:artifact_file_path] %>
    tags: <%= ec2[:tags] %>

  tasks:
    - include_tasks: vpc.yml

    - ec2_instance_facts:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ resource_name }}"
          instance-state-name: running
      register: ec2_facts

    - name: set IP address fact
      set_fact:
        instance_id: "{{ item['instance_id'] }}"
      with_items: "{{ ec2_facts.instances }}"
      when: ec2_facts.instances | length > 0

    - block:
      - name: get the Administrator password
        community.aws.ec2_win_password:
          aws_access_key: "{{ access_key }}"
          aws_secret_key: "{{ secret_key }}"
          region: "{{ region }}"
          instance_id: "{{ instance_id }}"
          key_file: "{{ secret_key_path }}"
          wait: yes
          wait_timeout: 5
        retries: 20
        delay: 15
        until: result_win_password is not failed
        when: instance_id is defined
        register: result_win_password

      - fail:
          msg: "Coult not lookup windows instance Administrator password"
        when: result_win_password is failed
      when: is_windows

    - block:
      - name: Init the params config
        set_fact:
          params: "{{ (params|default({})) | combine({
            'ip': item.public_ip_address
            })
          }}"
        with_items: "{{ ec2_facts.instances }}"

      - name: Add eventual windows params
        set_fact:
          params: "{{ (params|default({})) | combine({
            'win_password': result_win_password['win_password']
            })
          }}"
        when: is_windows and result_win_password

      - name: Creating artifact JSON key/values
        set_fact:
          artifact_json: "{{ artifact_json | default({}) | combine({
            'resource_id': resource_id,
            'params': params
            })
          }}"

      - name: write var to file
        copy:
          content: "{{ artifact_json | to_nice_json }}"
          dest: "{{ artifact_path }}/artifact.json"

      delegate_to: localhost
