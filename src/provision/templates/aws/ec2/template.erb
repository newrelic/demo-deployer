---
- name: Provision an EC2 instance
  hosts: localhost
  remote_user: <%= ec2[:remote_user] %>
  gather_facts: True

  vars:
    access_key: <%= ec2[:aws_access_key] %>
    secret_key: <%= ec2[:aws_secret_key] %>
    secret_key_name: <%= ec2[:secret_key_name] %>
    secret_key_path: <%= ec2[:secret_key_path] %>
    ami_name: <%= ec2[:ami_name] %>
    is_windows: <%= ec2[:is_windows] %>
    region: <%= ec2[:region] %>

    resource_id: <%= ec2[:resource_id] %>
    resource_name: <%= ec2[:resource_name] %>
    instance_size: <%= ec2[:instance_size] %>
    artifact_path: <%= ec2[:artifact_file_path] %>
    tags: <%= ec2[:tags] %>

  tasks:
    - include_tasks: vpc.yml

    - name: Determine AMI ID for EC2 instance
      amazon.aws.ec2_ami_info:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          name: "{{ ami_name }}"
      register: found_ec2_ami_fact

    - fail:
        msg: "AMI not found"
      when: found_ec2_ami_fact is not defined

    - name:  set AMI ID fact
      vars:
        amis: >
          {{ found_ec2_ami_fact.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
      set_fact:
        ami_id:  "{{ amis.image_id }}"

    - name: Found ami output
      debug:
        msg: "Using ami_id:{{ami_id}}"

    - name: Security group rule descriptions - "{{ resource_id }}"
      ec2_group:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        description: "sg for {{ resource_name }}"
        name:  "{{ resource_name }}"
        vpc_id: "{{default_vpc}}"
        tags:
          Name: "{{resource_name}}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
<%= ec2[:ports].collect {|port| "            - #{port}" }.join("\n") %>
            - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow ports

    - name: Provision AWS EC2 instance - "{{ resource_id }}"
      ec2_instance:
         key_name: "{{ secret_key_name }}"
         aws_access_key: "{{ access_key }}"
         aws_secret_key: "{{ secret_key }}"
         region: "{{ region }}"
         instance_type: "{{ instance_size }}"
         image:
          id: "{{ ami_id }}"
         security_groups: "{{ resource_name }}"
         vpc_subnet_id: "{{default_vpc_subnet_id}}"
         network:
          assign_public_ip: yes
         wait: true
         state: running
         tags: "{{ tags }}"
         name: "{{ resource_name }}"
<% unless ec2[:cpu_credit_specification].nil? %>
         cpu_credit_specification: <%= ec2[:cpu_credit_specification] %>
<% end %>
<% unless ec2[:user_data].nil? %>
         user_data: <%= ec2[:user_data] %>
<% end %>
      register: ec2

    - amazon.aws.ec2_instance_info:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ resource_name }}"
          instance-state-name: running
      register: ec2_facts

    - fail:
        msg: "Provisioning EC2 instance '{{ resource_name }}' failed, instance not found"
      when: ec2_facts.instances | length == 0

    - name: set IP address fact
      set_fact:
        ip_address: "{{ item['public_ip_address'] }}"
        private_dns_name: "{{ item['private_dns_name'] }}"
        instance_id: "{{ item['instance_id'] }}"
      with_items: "{{ ec2_facts.instances }}"

    - block:
      - name: wait for WinRM to answer on all hosts
        wait_for:
          port: 5986
          host: "{{ ip_address }}"
          timeout: 900

      - name: Wait for system to become reachable over WinRM
        wait_for_connection:
          timeout: 900

      - name: get the Administrator password
        community.aws.ec2_win_password:
          aws_access_key: "{{ access_key }}"
          aws_secret_key: "{{ secret_key }}"
          region: "{{ region }}"
          instance_id: "{{ instance_id }}"
          key_file: "{{ secret_key_path }}"
          wait: yes
          wait_timeout: 5
        retries: 20
        delay: 15
        until: result_win_password is not failed
        register: result_win_password

      - fail:
          msg: "Coult not lookup windows instance Administrator password"
        when: result_win_password is failed
      when: is_windows

    - block:
      - name: Init the params config
        set_fact:
          params: "{{ (params|default({})) | combine({
            'ip': item.public_ip_address,
            'private_dns_name': private_dns_name,
            'instance_id': instance_id
            })
          }}"
        with_items: "{{ ec2_facts.instances }}"

      - name: Add eventual windows params
        set_fact:
          params: "{{ (params|default({})) | combine({
            'win_password': result_win_password['win_password']
            })
          }}"
        when: is_windows and result_win_password

      - name: Creating artifact JSON key/values
        set_fact:
          artifact_json: "{{ artifact_json | default({}) | combine({
            'resource_id': resource_id,
            'params': params
            })
          }}"

      - name: write var to file
        copy:
          content: "{{ artifact_json | to_nice_json }}"
          dest: "{{ artifact_path }}/artifact.json"
      delegate_to: localhost

    - name: wait for SSH to come up
      local_action: wait_for host={{ item.public_ip_address }} port=22 delay=60 timeout=900 state=started search_regex="OpenSSH"
      with_items: "{{ ec2.instances }}"
      when: is_windows == false
