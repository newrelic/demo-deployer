---
- name: Provision an EC2 instance
  hosts: localhost
  remote_user: <%= ec2[:remote_user] %>
  gather_facts: True

  vars:
    access_key: <%= ec2[:aws_access_key] %>
    secret_key: <%= ec2[:aws_secret_key] %>
    secret_key_name: <%= ec2[:secret_key_name] %>
    ami_name:  <%= ec2[:ami_name] %>
    region: <%= ec2[:region] %>

    resource_id: <%= ec2[:resource_id] %>
    resource_name: <%= ec2[:resource_name] %>
    instance_size: <%= ec2[:instance_size] %>
    artifact_path: <%= ec2[:artifact_file_path] %>
    tags: <%= ec2[:tags] %>

  tasks:
    - include_tasks: vpc.yml

    - name: Determine AMI ID for EC2 instance
      ec2_ami_facts:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          name: "{{ ami_name }}"
      register: found_ec2_ami_fact

    - fail:
        msg: "AMI not found"
      when: found_ec2_ami_fact is not defined

    - name: set AMI ID fact
      set_fact:
        ami_id:  "{{item['image_id']}}"
      with_items: "{{found_ec2_ami_fact['images']}}"

    - name: Security group rule descriptions - "{{ resource_id }}"
      ec2_group:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        description: "sg for {{ resource_name }}"
        name:  "{{ resource_name }}"
        vpc_id: "{{default_vpc}}"
        tags:
          Name: "{{resource_name}}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
<%= ec2[:ports].collect {|port| "            - #{port}" }.join("\n") %>
            - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow ports

    - name: Provision AWS EC2 instance - "{{ resource_id }}"
      ec2_instance:
         key_name: "{{ secret_key_name }}"
         aws_access_key: "{{ access_key }}"
         aws_secret_key: "{{ secret_key }}"
         region: "{{ region }}"
         instance_type: "{{ instance_size }}"
         image: 
          id: "{{ ami_id }}"
         security_groups: "{{ resource_name }}"
         vpc_subnet_id: "{{default_vpc_subnet_id}}"
         network:
          assign_public_ip: yes
         wait: true
         state: running
         tags: "{{ tags }}"
         name: "{{ resource_name }}"
<% unless ec2[:cpu_credit_specification].nil? %>
         cpu_credit_specification: <%= ec2[:cpu_credit_specification] %>
<% end %>
      register: ec2

    - ec2_instance_facts:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ resource_name }}"
          instance-state-name: running
      register: ec2_facts

    - fail:
        msg: "Provisioning EC2 instance '{{ resource_name }}' failed, instance not found"
      when: ec2_facts.instances | length == 0

    - name: set IP address fact
      set_fact:
        ip_address: "{{ item['public_ip_address']}}"
      with_items: "{{ ec2_facts.instances }}"

    - block:
      - name: Create artifact file
        file:
          path: /tmp/var.json
          state: touch

      - name: Load var from file
        include_vars:
          file: /tmp/var.json
          name: temp_json

      - name: Creating artifact JSON key/values
        set_fact:
          artifact_json: "{{ temp_json | default([]) | combine({
            'resource_id': resource_id,
            'params': {
                'ip': item.public_ip_address
            }
            })
          }}"
        with_items: "{{ ec2_facts.instances }}"

      - name: write var to file
        copy:
          content: "{{ artifact_json | to_nice_json }}"
          dest: "{{ artifact_path }}/artifact.json"
      delegate_to: localhost

    - name: wait for SSH to come up
      local_action: wait_for host={{ item.public_ip_address }} port=22 delay=60 timeout=320 state=started search_regex="OpenSSH"
      with_items: "{{ ec2.instances }}"
