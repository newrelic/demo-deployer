---

- hosts: localhost
  remote_user: <%= lambda_function[:remote_user] %>
  gather_facts: True

  vars:
    resource_id: <%= lambda_function[:resource_id] %>
    lambda_function_name: <%= lambda_function[:lambda_function_name] %>
    apigw_name: <%= lambda_function[:lambda_function_name] %>
    apigw_api_id: <%= lambda_function[:api_gateway_api_id] %>
    aws_access_key: <%= lambda_function[:aws_access_key] %>
    aws_secret_key: <%= lambda_function[:aws_secret_key] %>
    region: <%= lambda_function[:aws_region] %>
    iam_policy_name: <%= lambda_function[:iam_policy_name] %>
    iam_role_name: <%= lambda_function[:iam_role_name] %>
    vpc_security_group_name: <%= lambda_function[:vpc_security_group_name] %>
    artifact_path: <%= lambda_function[:artifact_file_path] %>
    output_file_path: <%= lambda_function[:output_file_path] %>
    zip_file_path: <%= lambda_function[:zip_file_path] %>
    swagger_file_path: <%= lambda_function[:swagger_file_path] %>
    tags: <%= lambda_function[:tags] %>
    handler_name: lambda.lambda_handler
    memory_size: 128
    runtime: python3.7
    timeout: 15

  tasks:
    - include_tasks: vpc.yml

    - name: Create lambda IAM role
      iam_role:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        name: "{{ iam_role_name }}"
        state: present
        assume_role_policy_document: {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": [
        "lambda.amazonaws.com",
        "apigateway.amazonaws.com"
        ]
      },
      "Action": "sts:AssumeRole"
    }
  ]
}

    - name: Create lambda IAM policy
      iam_policy:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        iam_type: role
        iam_name: "{{ iam_role_name }}"
        policy_name: "{{ iam_policy_name }}"
        state: present
        policy_json: {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:DescribeInstances",
        "ec2:CreateNetworkInterface",
        "ec2:AttachNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface"
      ],
      "Resource": "*"
    }
  ]
}

    - name: Create VPC security group
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        name: "{{ vpc_security_group_name }}"
        state: present
        description: "sg for {{ lambda_function_name }}"
        vpc_id: "{{ default_vpc }}"
        tags:
          Name: "{{ vpc_security_group_name }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
      register: default_vpc_security_group

    - name: find vpc security group id
      set_fact:
        default_vpc_security_id: "{{default_vpc_security_group['group_id']}}"
      when: default_vpc_security_group is defined

    - name: Provision lambda function
      lambda:
        name: "{{ lambda_function_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        role: "{{ iam_role_name }}"
        handler: "{{ handler_name }}"
        runtime: "{{ runtime }}"
        zip_file: "{{ zip_file_path }}"
        timeout: "{{ timeout }}"
        vpc_subnet_ids: "{{ default_vpc_subnet_id }}"
        vpc_security_group_ids: "{{ default_vpc_security_id }}"
        memory_size: "{{ memory_size }}"
        tags: "{{ tags }}"
      register: lambda_function
      retries: 30
      delay: 10
      until: 
        - lambda_function is not failed
        - "lambda_function.configuration.state == 'Active'"

    - name: Create lambda function policy
      lambda_policy:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: "{{ state | default('present') }}"
        function_name: "{{ lambda_function_name }}"
        statement_id: "{{ lambda_function_name }}-id"
        action: lambda:InvokeFunction
        principal: apigateway.amazonaws.com

    - cloudwatchlogs_log_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: present
        retention: 3653
        log_group_name: "/aws/lambda/{{ lambda_function_name }}"

    - name: Get lambda config facts
      community.aws.lambda_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        query: config
        function_name: "{{ lambda_function_name }}"
      register: lambda_function_details

    - name: Get lambda arn
      set_fact:
        lambda_arn: "{{lambda_function_details.ansible_facts['lambda_facts']['function'][lambda_function_name]['function_arn']}}"
      when: lambda_function_details is defined

    - name: Create lambda uri
      set_fact:
        lambda_uri: "arn:aws:apigateway:{{ region }}:lambda:path/2015-03-31/functions/{{ lambda_arn }}/invocations"
      when: lambda_function_details is defined

    - template:
        src: "{{ swagger_file_path }}"
        dest: "{{ output_file_path }}/swagger.yml"
      delegate_to: localhost

    - name: Create API Gateway
      aws_api_gateway:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ region }}"
        state: present
        api_id: "{{ apigw_api_id }}"
        stage: api
        swagger_file: "{{ output_file_path }}/swagger.yml"
      register: api_output

    - fail:
        msg: "api_output not found when creating api gateway for api_id {{ apigw_api_id }}"
      when: api_output is not defined

    - name: Find new api id
      set_fact:
        api_id: "{{ api_output['api_id'] }}"

    - name: Create api gateway url
      set_fact:
        apigw_url: "https://{{ api_id }}.execute-api.{{ region }}.amazonaws.com"

    - block:
      - name: Create artifact file
        file:
          path: /tmp/var.json
          state: touch

      - name: load var from file
        include_vars:
          file: /tmp/var.json
          name: temp_json

      - name: Creating artifact JSON key/values
        set_fact:
          artifact_json: "{{ temp_json | default([]) | combine({
            'resource_id': resource_id,
            'params': {
                'url': apigw_url,
                'aws_access_key': aws_access_key,
                'iam_role_name': iam_role_name,
                'aws_secret_key': aws_secret_key,
                'aws_region': region,
                'lambda_arn': lambda_arn,
                'lambda_uri': lambda_uri,
                'api_id': api_id,
                'lambda_function_name': lambda_function_name,
                'apigw_name': apigw_name
            }
            })
          }}"

      - name: write var to file
        copy:
          content: "{{ artifact_json | to_nice_json }}"
          dest: "{{ artifact_path }}/artifact.json"
      delegate_to: localhost
