name: Test

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.4'

      - name: Ruby Gem Cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
    
      - name: Lint
        # Remove this line to allow this job to prevent PRs from merging
        continue-on-error: true
        run: bundle exec rubocop
  
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.4'

      - name: Ruby Gem Cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Unit Tests
        run: bundle exec rake test:unit
      
  test-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.4'

      - name: Ruby Gem Cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      
      - name: Generate Default SSH Keypair
        run: ssh-keygen -m PEM -t rsa -b 4096 -f $HOME/.ssh/id_rsa -q -N ""

      - name: Write AWS Certificate to File
        env:
          AWS_PEM: ${{ secrets.UAT_AWS_PEM_FILE }}
        run: |
          rm -f user_acceptance_tests/aws/uat-ca.pem
          echo $AWS_PEM > user_acceptance_tests/aws/uat-ca.pem
          sudo chmod 400 user_acceptance_tests/aws/uat-ca.pem

      - name: Integration Tests 
        run: bundle exec rake test:uat:integration

  test-cloudprovider-azure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.4'

      - name: Ruby Gem Cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gems
        id: install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Cache Python Packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/test.yml') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          python3 -m pip install ansible boto3 botocore boto packaging azure msrest msrestazure

      - name: Install Ansible Galaxy Plugins
        run: ansible-galaxy install newrelic.newrelic_java_agent
      
      - name: Generate Default SSH Keypair
        run: ssh-keygen -m PEM -t rsa -b 4096 -f $HOME/.ssh/id_rsa -q -N ""
      
      - name: Write AWS Certificate to File
        env:
          AWS_PEM: ${{ secrets.UAT_AWS_PEM_FILE }}
        run: |
          rm -f user_acceptance_tests/uat-ca.pem
          echo $AWS_PEM > user_acceptance_tests/uat-ca.pem
          sudo chmod 400 user_acceptance_tests/uat-ca.pem
      
      - name: Write UAT JSON to file
        env:
          UAT_JSON: ${{ secrets.USER_UAT_JSON }}
        run: |
          echo $UAT_JSON > user_acceptance_tests/azure/uatuser.json.local

      - name: Cloud Provider Tests (Azure)
        run: bundle exec rake test:uat:azure

  test-cloudprovider-aws:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.4'

      - name: Ruby Gem Cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Cache Python Packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/test.yml') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip setuptools
          python3 -m pip install ansible boto3 botocore boto

      - name: Install Ansible Galaxy Plugins
        run: ansible-galaxy install newrelic.newrelic_java_agent

      - name: Generate Default SSH Keypair
        run: ssh-keygen -m PEM -t rsa -b 4096 -f $HOME/.ssh/id_rsa -q -N ""
        
      - name: Write AWS Certificate to File
        env:
          AWS_PEM: ${{ secrets.UAT_AWS_PEM_FILE }}
        run: |
          rm -f user_acceptance_tests/uat-ca.pem
          echo $AWS_PEM > user_acceptance_tests/uat-ca.pem
          sudo chmod 400 user_acceptance_tests/uat-ca.pem
      
      - name: Write UAT JSON to file
        env:
          UAT_JSON: ${{ secrets.USER_UAT_JSON }}
        run: |
          echo $UAT_JSON > user_acceptance_tests/aws/uatuser.json.local
  
      - name: Cloud Provider Tests (AWS)
        run: bundle exec rake test:uat:aws
  
  slack-notify:
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, test-cloudprovider-aws, test-cloudprovider-azure]
    if: ${{ always() }}
    steps:
      - name: Build Result Slack Notification
        uses:  8398a7/action-slack@v3
        with:
          author_name: GitHub Actions
          status: custom
          fields: commit,repo,ref,author,eventName,message,workflow
          custom_payload: |
            {
              username: "GitHub Actions",
              icon_emoji: ":octocat:",
              attachments: [{
                color: ${{ 
                  needs.lint.result == 'success' &&
                  needs.test-unit.result == 'success' &&
                  needs.test-integration.result == 'success' &&
                  needs.test-cloudprovider-azure.result == 'success' &&
                  needs.test-cloudprovider-aws.result == 'success'
                }} === true ? '#43cc11' : '#e05d44',
                blocks: [
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: `Build for ${process.env.AS_REPO}`
                    }
                  },
                  {
                    type: "section",
                    fields: [
                      {
                        type: "mrkdwn",
                        text: `*Commit:*\n${process.env.AS_COMMIT}`
                      },
                      {
                        type: "mrkdwn",
                        text: `*Author:*\n${process.env.AS_AUTHOR}`
                      },
                      {
                        type: "mrkdwn",
                        text: `*Branch:*\n${process.env.AS_REF}`
                      },
                      {
                        type: "mrkdwn",
                        text: `*Message:*\n${process.env.AS_MESSAGE}`
                      },
                      {
                        type: "mrkdwn",
                        text: `*Type:*\n${process.env.AS_EVENT_NAME}`
                      },
                      {
                        type: "mrkdwn",
                        text: "*PR:*\n${{ github.event.pull_request.html_url }}"
                      },
                      {
                        type: "mrkdwn",
                        text: `*Workflow:*\n${ process.env.AS_WORKFLOW }`
                      }
                    ]
                  },
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: [
                        "*Result:*",
                        `• ${ ${{ needs.lint.result == 'success' }} === true ? '✅' : '❌' } Lint: ${{ needs.lint.result }}`,
                        `• ${ ${{ needs.test-unit.result == 'success' }} === true ? '✅' : '❌' } Unit test: ${{ needs.test-unit.result }}`,
                        `• ${ ${{ steps.test-integration.result == 'success' }} === true ? '✅' : '❌' } Integration test: ${{ steps.test-integration.result }}`,
                        `• ${ ${{ needs.test-cloudprovider-aws.result == 'success' }} === true ? '✅' : '❌' } AWS cloud provider test: ${{ needs.test-cloudprovider-aws.result }}`,
                        `• ${ ${{ needs.test-cloudprovider-azure.result == 'success' }} === true ? '✅' : '❌' } Azure cloud provider test: ${{ needs.test-cloudprovider-azure.result }}`
                      ].join('\n')
                    }
                  },
                  {
                    type: "context",
                    elements: [
                      {
                        type: "image",
                        image_url: "https://avatars2.githubusercontent.com/in/15368",
                        alt_text: "Github Actions"
                      },
                      {
                        type: "mrkdwn",
                        text: "This message was created automatically by GitHub Actions."
                      }
                    ]
                  }
                ]
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
  
        